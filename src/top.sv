//`line 2 "top.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\SV
   // Based on the design from: http://surf-vhdl.com/how-to-implement-pipeline-multiplier-vhdl/?utm_source=mult-pipe&utm_medium=LK2&utm_campaign=ACLEAD
   // Converted to TL-Verilog with validity added, as well as inline stimulus and checking.
   
   // The logic diagram for this example, from Surf VHDL is (originally) here:
   //   http://surf-vhdl.com/wp/wp-content/uploads/2016/12/Mult-35x35_break_PIPE2.jpg

   //module top(input wire clk, input wire reset, input wire [31:0] cyc_cnt, output wire passed, output wire failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */
module top(input logic clk, input logic reset, input logic[34:0] MUL_aa_a0, input logic[34:0] MUL_bb_a0, output logic[69:0] MUL_mm_a6, output bit done);
 //_\TLV
   //_|mul
      // Random stimulus
      //_@0
         //assign MUL_aa_a0[34:0] = 'd12345;
         //assign MUL_bb_a0[34:0] = 'd12345;
      // 1. A.lower * B.lower (green rectangle in surf-vhdl diagram)
      //_@1
      `include "top_gen.sv"
         assign MUL_pp1_a1[33:0] = MUL_aa_a1[16:0] * MUL_bb_a1[16:0];
      //_@2
         assign MUL_mm1_a2[16:0] = MUL_pp1_a2[16:0];

      // 2. A.lower * B.upper (lower purple rectangle in surf-vhdl diagram)
      //_@2
         assign MUL_pp2_a2[51:17] = MUL_aa_a2[16:0] * MUL_bb_a2[34:17];
      //_@3
         assign MUL_mm2_a3[52:17] = MUL_pp2_a3[51:17] + MUL_pp1_a3[33:17];

      // 3. A.upper * B.lower (upper purple rectangle in surf-vhdl diagram)
      //_@3
         assign MUL_pp3_a3[51:17] = MUL_aa_a3[34:17] * MUL_bb_a3[16:0];
      //_@4
         assign MUL_mm3_a4[52:17] = MUL_pp3_a4[51:17] + MUL_mm2_a4[52:17];

      // 4. A.upper * B.upper (orange rectangle in surf-vhdl diagram)
      //_@4
         assign MUL_pp4_a4[69:34] = MUL_aa_a4[34:17] * MUL_bb_a4[34:17];
      //_@5
         assign MUL_mm4_a5[69:34] = MUL_pp4_a5[69:34] + MUL_mm3_a5[52:34];

      // Output
      //_@6
         assign MUL_mm_a6[69:0] = {MUL_mm4_a6[69:34], MUL_mm3_a6[33:17], MUL_mm1_a6[16:0]};


      //---------------------
      // Testbench (inlined)

      // Perform full width multiplication and compare with DUT result.
      //_@7
         assign MUL_mm_full_a7[69:0] = MUL_aa_a7 * MUL_bb_a7;
         // Sticky error flag.
         //$Error <= *reset ? 0 : $Error || ($mm_full != $mm);

         //assign done = 1'b1;
         // Assert these to end simulation (before Makerchip cycle limit).
         //assign passed = cyc_cnt > 40;
//_\SV
   endmodule


// Undefine macros defined by SandPiper (in "top_gen.sv").
//`undef BOGUS_USE
